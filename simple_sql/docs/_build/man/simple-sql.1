.\" Man page generated from reStructuredText.
.
.TH "SIMPLE-SQL" "1" "Apr 16, 2021" "" "simple-sql"
.SH NAME
simple-sql \- simple-sql 0.0.1a
.
.nr rst2man-indent-level 0
.
.de1 rstReportMargin
\\$1 \\n[an-margin]
level \\n[rst2man-indent-level]
level margin: \\n[rst2man-indent\\n[rst2man-indent-level]]
-
\\n[rst2man-indent0]
\\n[rst2man-indent1]
\\n[rst2man-indent2]
..
.de1 INDENT
.\" .rstReportMargin pre:
. RS \\$1
. nr rst2man-indent\\n[rst2man-indent-level] \\n[an-margin]
. nr rst2man-indent-level +1
.\" .rstReportMargin post:
..
.de UNINDENT
. RE
.\" indent \\n[an-margin]
.\" old: \\n[rst2man-indent\\n[rst2man-indent-level]]
.nr rst2man-indent-level -1
.\" new: \\n[rst2man-indent\\n[rst2man-indent-level]]
.in \\n[rst2man-indent\\n[rst2man-indent-level]]u
..
.SH SIMPLE_SQL.METADATA PACKAGE
.SS simple_sql.metadata
.INDENT 0.0
.TP
.B class simple_sql.metadata.MetaData(backup_path: str)
.UNINDENT
.SH SIMPLE_SQL.MODEL PACKAGE
.SS simple_sql.model.column
.INDENT 0.0
.TP
.B class simple_sql.model.column.Column(name: str, type: Type, primary_key: bool = False, unique: bool = False, nullable: bool = True, constraint: str = None, default: Any = None)
Describes a table column, the string form of this object is the
string that declares a column with MySQL compliant syntax.
.INDENT 7.0
.TP
.B __name
The name of the column as a string.
.INDENT 7.0
.TP
.B Type
str
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B __type
The type of the column as a Type object.
.INDENT 7.0
.TP
.B Type
Type
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B __primary_key
True if the column is a primary key.
.INDENT 7.0
.TP
.B Type
bool
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B __unique
True if the column has UNIQUE keyword.
.INDENT 7.0
.TP
.B Type
bool
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B __nullable
True if the column is nullable.
.INDENT 7.0
.TP
.B Type
bool, default True
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B __constraint
Contains a basic CHECK constraint; \fIthis is a temporary solution,
the constraints will be handled differently in the future\fP\&.
.INDENT 7.0
.TP
.B Type
str
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B __default
Contains the value that will be set as default, if no value
is passed the DEFAULT clause won’t be used; \fIthis is a temporary solution,
this clause will be handled differently in the future\fP\&.
.INDENT 7.0
.TP
.B Type
Any
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBname\fP (\fIstr\fP) – The name of the column as a string.
.IP \(bu 2
\fBtype\fP (\fIType\fP) – The type of the column as a Type object.
.IP \(bu 2
\fBprimary_key\fP (\fIbool\fP\fI, \fP\fIdefault False\fP) – True if the column is a primary key.
.IP \(bu 2
\fBunique\fP (\fIbool\fP\fI, \fP\fIdefault False\fP) – True if the column has UNIQUE keyword.
.IP \(bu 2
\fBnullable\fP (\fIbool\fP\fI, \fP\fIdefault True\fP) – True if the column is nullable.
.IP \(bu 2
\fBconstraint\fP (\fIstr\fP\fI, \fP\fIoptional\fP) – Contains a basic CHECK constraint.
.IP \(bu 2
\fBdefault\fP (\fIAny\fP\fI, \fP\fIoptional\fP) – Contains the value that will be set as default, if no value
is passed the DEFAULT clause won’t be used.
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B get_constraint() -> str
.INDENT 7.0
.TP
.B Returns
The string representing the constraint.
.TP
.B Return type
str
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B get_default() -> Any
.INDENT 7.0
.TP
.B Returns
The default value.
.TP
.B Return type
Any
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B get_name() -> str
.INDENT 7.0
.TP
.B Returns
The name of the column.
.TP
.B Return type
str
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B get_type() -> Type
.INDENT 7.0
.TP
.B Returns
The type of the column as a Type object.
.TP
.B Return type
Type
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B is_compatible(column: simple_sql.model.column.Column) -> bool
Defines the way in which two columns are compatible
in terms of type.
.INDENT 7.0
.TP
.B Parameters
\fBcolumn\fP (\fIColumn\fP) – The column to compare with.
.TP
.B Returns
Returns true if the types of the column is the same
as the column passed.
.TP
.B Return type
bool
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B is_nullable() -> bool
.INDENT 7.0
.TP
.B Returns
True if the column is nullable.
.TP
.B Return type
bool
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B is_primary_key() -> bool
.INDENT 7.0
.TP
.B Returns
True if the column is primary key.
.TP
.B Return type
bool
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B is_unique() -> bool
.INDENT 7.0
.TP
.B Returns
True if the column must be unique.
.TP
.B Return type
bool
.UNINDENT
.UNINDENT
.UNINDENT
.SS simple_sql.model.foreign_key
.INDENT 0.0
.TP
.B class simple_sql.model.foreign_key.ForeignKey(from_column: str, to_column: str, on_delete_cascade: bool = False)
Describes a foreign key, the string form of this object is the
string that declares a foreign key with MySQL compliant syntax.
The table of the referencing column is not passed because it is
handled inside the creation of the relative Table object.
.INDENT 7.0
.TP
.B __from_column
The column in the current table that references another column
.INDENT 7.0
.TP
.B Type
Column
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B __to_table
The table to which the column in \fB__to_column\fP is bound
.INDENT 7.0
.TP
.B Type
Table
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B __to_column
The column that is referenced by \fB__from_column\fP
.INDENT 7.0
.TP
.B Type
Column
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B __from_column_str
The name of \fB__from_column\fP
.INDENT 7.0
.TP
.B Type
str
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B __to_table_str
The name of \fB__to_table\fP
.INDENT 7.0
.TP
.B Type
str
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B __to_column_str
The name of \fB__to_column\fP
.INDENT 7.0
.TP
.B Type
str
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B __on_delete_cascade
It’s True if the reference should cascade on delete
.INDENT 7.0
.TP
.B Type
bool
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBfrom_column\fP (\fIstr\fP) – String name of the column in the current table that references another column
.IP \(bu 2
\fBto_column\fP (\fIstr\fP) – String of type table.column, represent the column that is referenced by \fBfrom_column\fP
.IP \(bu 2
\fBon_delete_cascade\fP (\fIbool\fP\fI, \fP\fIdefault False\fP) – It’s True if the reference should cascade on delete
.UNINDENT
.TP
.B Raises
\fBSyntaxError\fP – If the to_column is not identified as table.column
.UNINDENT
.INDENT 7.0
.TP
.B get_column() -> Column
.INDENT 7.0
.TP
.B Returns
The referenced column.
.TP
.B Return type
Column
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B get_from_column() -> Column
.INDENT 7.0
.TP
.B Returns
The referencing column.
.TP
.B Return type
Column
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B get_strings() -> List
.INDENT 7.0
.TP
.B Returns
A list containing the strings respectively of \fBfrom_column\fP, \fBto_table\fP
and \fBto_column\fP\&.
.TP
.B Return type
List
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B get_table() -> Table
.INDENT 7.0
.TP
.B Returns
The table to which the referenced column belongs to.
.TP
.B Return type
Table
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B set_objects(from_column: Column = None, to_table: Table = None, to_column: Column = None)
Set the \fBfrom_column\fP, \fBto_table\fP and \fBto_column\fP (all at once or one at a time),
it is used primarly by the \fBTable\fP object when parsing the strings.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBfrom_column\fP (\fIColumn\fP\fI, \fP\fIoptional\fP) – The object that will be assigned to the \fB__from_column\fP attribute
.IP \(bu 2
\fBto_table\fP (\fITable\fP\fI, \fP\fIoptional\fP) – The object that will be assigned to the \fB__to_table\fP attribute
.IP \(bu 2
\fBto_column\fP (\fIColumn\fP\fI, \fP\fIoptional\fP) – The object that will be assigned to the \fB__to_column\fP attribute
.UNINDENT
.UNINDENT
.UNINDENT
.UNINDENT
.SS simple_sql.model.table
.INDENT 0.0
.TP
.B class simple_sql.model.table.Table(metadata: MetaData, name: str, *columns_and_foreign: List, if_not_exists: bool = True)
Describes a table, the string form of this object is the
string that declares a table with MySQL compliant syntax.
Columns, references and primary keys are created using the
string representation of the column and foreign key objects.
Inside checks to ensure foreign key compatibility are handled
here
.INDENT 7.0
.TP
.B __columns
A list of the columns of this table as objects.
.INDENT 7.0
.TP
.B Type
List[Column]
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B __name
The name of the table.
.INDENT 7.0
.TP
.B Type
str
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B __references
A list of the references of this table as objects.
.INDENT 7.0
.TP
.B Type
List[ForeignKey]
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B __if_not_exists
True if the declaration should include IF NOT EXISTS clause.
.INDENT 7.0
.TP
.B Type
bool
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B __primary_keys
A list of the columns that are primary keys.
.INDENT 7.0
.TP
.B Type
List[Column]
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B __metadata
The \fBMetaData\fP object relative to this database.
.INDENT 7.0
.TP
.B Type
MetaData
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBmetadata\fP (\fIMetaData\fP) – The \fBMetaData\fP object relative to this database.
.IP \(bu 2
\fBname\fP (\fIstr\fP) – The name of the table.
.IP \(bu 2
\fB*columns_and_foreign\fP (\fIList\fP\fI[\fP\fIColumn\fP\fI or \fP\fIForeign\fP\fI]\fP) – Contains columns and foreign keys of this table.
.IP \(bu 2
\fBif_not_exists\fP (\fIbool\fP\fI, \fP\fIdefault True\fP) – True if the table should include IF NOT EXISTS clause.
.UNINDENT
.TP
.B Raises
.INDENT 7.0
.IP \(bu 2
\fBZeroColumns\fP – If no columns are provided to the constructor.
.IP \(bu 2
\fBNoSuchColumn\fP – If a foreign key is relative to a non\-existent column.
.IP \(bu 2
\fBPrimaryKeyError\fP – If no columns are flagged as primary keys.
.IP \(bu 2
\fBForeignKeyError\fP – If a foreign key is relative to a non\-existent column.
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B contains(column: simple_sql.model.column.Column) -> bool
Used to check that this table contains a certain column.
.INDENT 7.0
.TP
.B Parameters
\fBcolumn\fP (\fIColumn\fP) – The column to search for.
.TP
.B Returns
True if \fBcolumn\fP is in this table
.TP
.B Return type
bool
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B get_column(column_name: str) -> simple_sql.model.column.Column
Search and obtain a column in this table given its name.
.INDENT 7.0
.TP
.B Parameters
\fBcolumn_name\fP (\fIstr\fP) – The name of the column to search.
.TP
.B Returns
The column named \fBcolumn_name\fP\&.
.TP
.B Return type
Column
.TP
.B Raises
\fBNoSuchColumn\fP – If there is no column named \fBcolumn_name\fP\&.
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B get_columns() -> List[simple_sql.model.column.Column]
.INDENT 7.0
.TP
.B Returns
The columns of the table.
.TP
.B Return type
List[Column]
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B get_name() -> str
.INDENT 7.0
.TP
.B Returns
The name of the table.
.TP
.B Return type
str
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B get_references() -> List[simple_sql.model.foreign_key.ForeignKey]
.INDENT 7.0
.TP
.B Returns
The foreign keys of the table.
.TP
.B Return type
List[ForeignKey]
.UNINDENT
.UNINDENT
.UNINDENT
.SS simple_sql.model.type
.INDENT 0.0
.TP
.B class simple_sql.model.type.Type(type: TypesEnum, len: int = \- 1)
Describes a MySQL type uaing a TypesEnum ad an integer for the length.
This class is used when declaring columns.
.INDENT 7.0
.TP
.B __type
The actual type of this \fBType\fP instance
.INDENT 7.0
.TP
.B Type
TypesEnum
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B __len
The length of this type, the default value (\-1) means that the length
won’t be specified at declaration
.INDENT 7.0
.TP
.B Type
int
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBtype\fP (\fITypesEnum\fP) – The actual type of this \fBType\fP instance
.IP \(bu 2
\fBlen\fP (\fIint\fP\fI, \fP\fIdefault \-1\fP) – The length of this type, the default value (\-1) means that the length
won’t be specified at declaration
.UNINDENT
.UNINDENT
.UNINDENT
.SS simple_sql.model.types_enum
.INDENT 0.0
.TP
.B class simple_sql.model.types_enum.TypesEnum(value)
Enumerative object that contains all the possible types
MySQL can offer. All the enumeratives are associated with
a string that represents them in MySQL.
.INDENT 7.0
.TP
.B Numeric types
TINYINT
.sp
SMALLINT
.sp
MEDIUMINT
.sp
INT
.sp
BIGINT
.sp
DECIMAL
.sp
FLOAT
.sp
DOUBLE
.sp
BIT
.UNINDENT
.INDENT 7.0
.TP
.B String types
CHAR
.sp
VARCHAR
.sp
BINARY
.sp
VARBINARY
.sp
TINYBLOB
.sp
BLOB
.sp
MEDIUMBLOB
.sp
LONGBLOB
.sp
TINYTEXT
.sp
TEXT
.sp
MEDIUMTEXT
.sp
LONGTEXT
.sp
ENUM
.sp
SET
.UNINDENT
.INDENT 7.0
.TP
.B Date and time types
DATE
.sp
TIME
.sp
DATETIME
.sp
TIMESTAMP
.sp
YEAR
.UNINDENT
.INDENT 7.0
.TP
.B Spatial data types
GEOMETRY
.sp
POINT
.sp
LINESTRING
.sp
POLYGON
.sp
GEOMETRYCOLLECTION
.sp
MULTILINESTRING
.sp
MULTIPOINT
.sp
MULTIPOLYGON
.UNINDENT
.UNINDENT
.SH SIMPLE_SQL.DATABASE PACKAGE
.SS simple_sql.database
.INDENT 0.0
.TP
.B class simple_sql.database.Database(host: str, user: str, password: str, metadata: simple_sql.metadata.MetaData)
.UNINDENT
.SH SIMPLE_SQL.STATEMENTS PACKAGE
.SS simple_sql.statements.delete
.INDENT 0.0
.TP
.B class simple_sql.statements.delete.Delete(table: Table = None, where_clause: Dict[Column, Any] = None)
This class represents a DELETE statement (MySQL compliant).
Its string form is the syntax needed to execute a DELETE statement
according to the table and where_clause specified. All the parameters
are optional to enable the user to specify one clause a time.
In the future all where clauses will be modeled with a class.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBtable\fP (\fITable\fP\fI, \fP\fIoptional\fP) – The table to delete from.
.IP \(bu 2
\fBwhere_clause\fP (\fIDict\fP\fI[\fP\fIColumn\fP\fI, \fP\fIAny\fP\fI]\fP\fI, \fP\fIoptional\fP) – The where clause.
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B __table
The table to delete from.
.INDENT 7.0
.TP
.B Type
Table
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B __where_clause
The where clause.
.INDENT 7.0
.TP
.B Type
Dict[Column, Any]
.UNINDENT
.UNINDENT
.UNINDENT
.SS simple_sql.statements.drop_table
.INDENT 0.0
.TP
.B class simple_sql.statements.drop_table.DropTable(table: Table = None)
This class represents a DROP TABLE statement (MySQL compliant).
Its string form is the syntax needed to execute a DROP TABLE statement
according to the table. All the parameters are optional to enable
the user to specify one clause a time.
.INDENT 7.0
.TP
.B Parameters
\fBtable\fP (\fITable\fP\fI, \fP\fIoptional\fP) – The table to drop.
.UNINDENT
.INDENT 7.0
.TP
.B __table
The table to drop.
.INDENT 7.0
.TP
.B Type
Table
.UNINDENT
.UNINDENT
.UNINDENT
.SS simple_sql.statements.insert_into
.INDENT 0.0
.TP
.B class simple_sql.statements.insert_into.InsertInto(table: Table = None, columns: List[Column] = None, values: List[Dict[Column, Any]] = None)
This class represents a INSERT INTO statement (MySQL compliant).
Its string form is the syntax needed to execute a INSERT INTO statement
according to the table. All the parameters are optional to enable
the user to specify one clause a time.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBtable\fP (\fITable\fP\fI, \fP\fIoptional\fP) – The table to insert into.
.IP \(bu 2
\fBcolumns\fP (\fIList\fP\fI[\fP\fIColumn\fP\fI]\fP\fI, \fP\fIoptional\fP) – To specify a list of columns if you want to insert values for certain columns
.IP \(bu 2
\fBvalues\fP (\fIList\fP\fI[\fP\fIDict\fP\fI[\fP\fIColumn\fP\fI, \fP\fIAny\fP\fI]\fP\fI]\fP\fI, \fP\fIoptional\fP) – The values to insert into the table
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B __table
The table to insert into.
.INDENT 7.0
.TP
.B Type
Table
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B __columns
To specify a list of columns if you want to insert values for certain columns
.INDENT 7.0
.TP
.B Type
List[Column]
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B __values
The values to insert into the table
.INDENT 7.0
.TP
.B Type
List[Dict[Column, Any]]
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Raises
\fBSyntaxError\fP – If the length of value tuples is not valid (with the set of columns
    specified or with the number of columns of the table).
.UNINDENT
.UNINDENT
.SS simple_sql.statements.select
.INDENT 0.0
.TP
.B class simple_sql.statements.select.Select(select_clause: Dict[Table, List[Column]] = None, from_tables: List[Table] = None, where_clause: Dict[Table, Dict[Column, Any]] = None)
This class represents a SELECT statement (MySQL compliant).
Its string form is the syntax needed to execute a SELECT statement
according to the table. All the parameters are optional to enable
the user to specify one clause a time.
In the future all where clauses will be modeled with a class.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBselect_clause\fP (\fIDict\fP\fI[\fP\fITable\fP\fI, \fP\fIList\fP\fI[\fP\fIColumn\fP\fI]\fP\fI]\fP\fI, \fP\fIoptional\fP) – The select clause for this select statement.
.IP \(bu 2
\fBfrom_tables\fP (\fIList\fP\fI[\fP\fITable\fP\fI]\fP\fI, \fP\fIoptional\fP) – The from clause for this select statement.
.IP \(bu 2
\fBwhere_clause\fP (\fIDict\fP\fI[\fP\fITable\fP\fI, \fP\fIDict\fP\fI[\fP\fIColumn\fP\fI, \fP\fIAny\fP\fI]\fP\fI]\fP\fI, \fP\fIoptional\fP) – The where clause for this select statement.
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B __select_clause
The select clause for this select statement.
.INDENT 7.0
.TP
.B Type
Dict[Table, List[Column]]
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B __from_tables
The from clause for this select statement.
.INDENT 7.0
.TP
.B Type
List[Table]
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B __where_clause
The where clause for this select statement.
.INDENT 7.0
.TP
.B Type
Dict[Table, Dict[Column, Any]]
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Raises
\fBNoSuchColumn\fP – If a column used in either the where or the set clause does
    not exists in the table.
.UNINDENT
.UNINDENT
.SS simple_sql.statements.update
.INDENT 0.0
.TP
.B class simple_sql.statements.update.Update(table: Table = None, set_clause: Dict[Column, Any] = None, where_clause: Dict[Column, Any] = None)
This class represents a UPDATE statement (MySQL compliant).
Its string form is the syntax needed to execute an UPDATE statement
according to the table. All the parameters are optional to enable
the user to specify one clause a time.
In the future all where clauses will be modeled with a class.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBtable\fP (\fITable\fP\fI, \fP\fIoptional\fP) – The table to update.
.IP \(bu 2
\fBset_clause\fP (\fIDict\fP\fI[\fP\fIColumn\fP\fI, \fP\fIAny\fP\fI]\fP\fI, \fP\fIoptional\fP) – The set clause containg pairs of column and its value.
.IP \(bu 2
\fBwhere_clause\fP (\fIDict\fP\fI[\fP\fIColumn\fP\fI, \fP\fIAny\fP\fI]\fP\fI, \fP\fIoptional\fP) – The where clause.
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B __table
The table to update.
.INDENT 7.0
.TP
.B Type
Table
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B __set_clause
The set clause containg pairs of column and value.
.INDENT 7.0
.TP
.B Type
Dict[Column, Any]
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B __where_clause
The where clause.
.INDENT 7.0
.TP
.B Type
Dict[Column, Any]
.UNINDENT
.UNINDENT
.UNINDENT
.SH SIMPLE_SQL.WRAPPERS PACKAGE
.SS simple_sql.wrappers.delete_wrapper
.INDENT 0.0
.TP
.B class simple_sql.wrappers.delete_wrapper.DeleteWrapper(metadata: MetaData, table_str: AnyStr, where_clause_str: Dict[AnyStr, Any])
This class uses the table name and the where clause as strings
with the metadata object (handled by \fBDatabase\fP) to obtain
the correct \fBTable\fP object and to create the where clause.
Using the delete and where methods, \fBDeleteWrapper\fP instances will be
created and returned to add clauses separately.
In the future all where clauses will be modeled with a class.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBmetadata\fP (\fIMetaData\fP\fI, \fP\fIoptional\fP) – The \fBMetaData\fP instance of the database.
.IP \(bu 2
\fBtable_str\fP (\fIAnyStr\fP\fI, \fP\fIoptional\fP) – The name of the table to delete from.
.IP \(bu 2
\fBwhere_clause_str\fP (\fIDict\fP\fI[\fP\fIAnyStr\fP\fI, \fP\fIAny\fP\fI]\fP\fI, \fP\fIoptional\fP) – The where clause to restrict which entries to delete.
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B __metadata
The \fBMetaData\fP instance of the database.
.INDENT 7.0
.TP
.B Type
MetaData
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B __table
The \fBTable\fP object.
.INDENT 7.0
.TP
.B Type
Table
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B __where_clause
The where clause generated from the string where clause.
.INDENT 7.0
.TP
.B Type
Dict[Column, Any]
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B __table_str
The name of the table to delete from.
.INDENT 7.0
.TP
.B Type
AnyStr
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B __where_clause_str
The where clause to restrict which entries to delete.
.INDENT 7.0
.TP
.B Type
Dict[AnyStr, Any]
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B where(where_clause_str: Dict[AnyStr, Any]) -> simple_sql.wrappers.delete_wrapper.DeleteWrapper
Used to specify the where clause.
.INDENT 7.0
.TP
.B Parameters
\fBwhere_clause_str\fP (\fIDict\fP\fI[\fP\fIAnyStr\fP\fI, \fP\fIAny\fP\fI]\fP) – The where clause to restrict which entries to delete.
.TP
.B Returns
A \fBDeleteWrapper\fP instance with the same metadata and table
name and the where_clause_str passed as parameter.
.TP
.B Return type
DeleteWrapper
.UNINDENT
.UNINDENT
.UNINDENT
.SS simple_sql.wrappers.drop_table_wrapper
.INDENT 0.0
.TP
.B class simple_sql.wrappers.drop_table_wrapper.DropTableWrapper(metadata: MetaData, table_str: AnyStr = None)
This class uses the table name a string with the metadata object
(handled by \fBDatabase\fP) to obtain the correct \fBTable\fP object.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBmetadata\fP (\fIMetaData\fP) – The \fBMetaData\fP instance of the database.
.IP \(bu 2
\fBtable_str\fP (\fIAnyStr\fP\fI, \fP\fIoptional\fP) – The name of the table to update.
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B __metadata
The \fBMetaData\fP instance of the database.
.INDENT 7.0
.TP
.B Type
MetaData
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B __table
The \fBTable\fP object to drop.
.INDENT 7.0
.TP
.B Type
Table
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B __table_str
The name of the table to update.
.INDENT 7.0
.TP
.B Type
AnyStr
.UNINDENT
.UNINDENT
.UNINDENT
.SS simple_sql.wrappers.insert_into_wrapper
.INDENT 0.0
.TP
.B class simple_sql.wrappers.insert_into_wrapper.InsertIntoWrapper(metadata: MetaData, table_str: AnyStr = None, columns_str: List[AnyStr] = None, values_str: List[Dict[AnyStr, Any]] = None)
This class uses the table name, the column list and values list
as strings with the metadata object (handled by \fBDatabase\fP) to obtain
the correct \fBTable\fP object and to create the column and values list as
MySQL compliant clauses.
Using the insert and values methods, \fBInsertIntoWrapper\fP instances will be
created and returned to add clauses separately.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBmetadata\fP (\fIMetaData\fP) – The \fBMetaData\fP instance of the database.
.IP \(bu 2
\fBtable_str\fP (\fITable\fP\fI, \fP\fIoptional\fP) – The name of the table to insert into.
.IP \(bu 2
\fBcolumns_str\fP (\fIList\fP\fI[\fP\fIAnyStr\fP\fI]\fP\fI, \fP\fIoptional\fP) – The list of column names to that defines the set of columns
to insert the values into.
.IP \(bu 2
\fBvalues_str\fP (\fIList\fP\fI[\fP\fIDict\fP\fI[\fP\fIAnyStr\fP\fI, \fP\fIAny\fP\fI]\fP\fI]\fP\fI, \fP\fIoptional\fP) – The list of pairs of column names and values to insert into the
table.
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B __metadata
The \fBMetaData\fP instance of the database.
.INDENT 7.0
.TP
.B Type
MetaData
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B __table
The \fBTable\fP object to insert into.
.INDENT 7.0
.TP
.B Type
Table
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B __columns
The list of \fBColumn\fP objects that defines the set of columns
to insert the values into.
.INDENT 7.0
.TP
.B Type
List[Column]
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B __values
The list of pairs of \fBColumn\fP objects and values to insert into the
table.
.INDENT 7.0
.TP
.B Type
List[Dict[Column, Any]]
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B __table_str
The name of the table to insert into.
.INDENT 7.0
.TP
.B Type
Table
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B __columns_str
The list of column names to that defines the set of columns
to insert the values into.
.INDENT 7.0
.TP
.B Type
List[AnyStr]
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B __values_str
The list of pairs of column names and values to insert into the
table.
.INDENT 7.0
.TP
.B Type
List[Dict[AnyStr, Any]]
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Raises
\fBNoSuchTable\fP – If the table specified does not exist.
.UNINDENT
.INDENT 7.0
.TP
.B values(values_str: List[Dict[AnyStr, Any]]) -> simple_sql.wrappers.insert_into_wrapper.InsertIntoWrapper
Used to specify the values to insert.
.INDENT 7.0
.TP
.B Parameters
\fBvalues_str\fP (\fIList\fP\fI[\fP\fIDict\fP\fI[\fP\fIAnyStr\fP\fI, \fP\fIAny\fP\fI]\fP\fI]\fP) – The list of pairs of column names and values to insert into the
table.
.TP
.B Returns
A \fBInsertIntoWrapper\fP instance with the same metadata, table
name and columns and the values_str passed as parameter.
.TP
.B Return type
InsertIntoWrapper
.UNINDENT
.UNINDENT
.UNINDENT
.SS simple_sql.wrappers.select_wrapper
.INDENT 0.0
.TP
.B class simple_sql.wrappers.select_wrapper.SelectWrapper(metadata: MetaData, select_clause_str: List[AnyStr] = None, where_clause_str: Dict[AnyStr, Any] = None)
This class uses the table name, the select clause and where clause
as strings with the metadata object (handled by \fBDatabase\fP) to obtain
the correct \fBTable\fP object and to create the where and select clauses.
Using the select and where methods, \fBSelectWrapper\fP instances will be
created and returned to add clauses separately.
In the future all where clauses will be modeled with a class.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBmetadata\fP (\fIMetaData\fP) – The \fBMetaData\fP instance of the database.
.IP \(bu 2
\fBselect_clause_str\fP (\fIList\fP\fI[\fP\fIAnyStr\fP\fI]\fP\fI, \fP\fIoptional\fP) – The select clause containing table.column values
or table values.
.IP \(bu 2
\fBwhere_clause_str\fP (\fIDict\fP\fI[\fP\fIAnyStr\fP\fI, \fP\fIAny\fP\fI]\fP\fI, \fP\fIoptional\fP) – The where clause.
.IP \(bu 2
\fB__metadata\fP (\fIMetaData\fP) – The \fBMetaData\fP instance of the database.
.IP \(bu 2
\fB__select_clause\fP (\fIDict\fP\fI[\fP\fITable\fP\fI, \fP\fIList\fP\fI[\fP\fIColumn\fP\fI]\fP\fI]\fP) – The select clause as object.
.IP \(bu 2
\fB__from_tables\fP (\fIList\fP\fI[\fP\fITable\fP\fI]\fP) – The tables to select from as objects.
.IP \(bu 2
\fB__where_clause\fP (\fIDict\fP\fI[\fP\fITable\fP\fI, \fP\fIDict\fP\fI[\fP\fIColumn\fP\fI, \fP\fIAny\fP\fI]\fP\fI]\fP) – The where clause as object.
.IP \(bu 2
\fB__select_clause_str\fP (\fIList\fP\fI[\fP\fIAnyStr\fP\fI]\fP) – The select clause containing table.column values
or table values.
.IP \(bu 2
\fB__where_clause_str\fP (\fIDict\fP\fI[\fP\fIAnyStr\fP\fI, \fP\fIAny\fP\fI]\fP) – The where clause as string.
.IP \(bu 2
\fB__table_col_mix\fP (\fIDict\fP\fI[\fP\fIAnyStr\fP\fI, \fP\fIList\fP\fI[\fP\fIAnyStr\fP\fI]\fP\fI]\fP) – A dictionary of table and list of columns to select
from that table.
.UNINDENT
.TP
.B Raises
\fBSyntaxError\fP – If the select or where clause does not respect specifications.
.UNINDENT
.INDENT 7.0
.TP
.B get_elements() -> Dict[AnyStr, List]
Function used in database to create the dictionary with correct
table and colum names for bettere accessibility.
.INDENT 7.0
.TP
.B Returns
A dictionary that associates to a table name a list with the
relative column names.
.TP
.B Return type
Dict[AnyStr, List[AnyStr]]
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B where(where_clause_str: Dict[AnyStr, Any]) -> simple_sql.wrappers.select_wrapper.SelectWrapper
Used to specify the where clause.
.INDENT 7.0
.TP
.B Parameters
\fBwhere_clause_str\fP (\fIDict\fP\fI[\fP\fIAnyStr\fP\fI, \fP\fIAny\fP\fI]\fP) – The pairs of column names and values for the where clause.
.TP
.B Returns
A \fBSelectWrapper\fP instance with the same metadata, table
name and select clause and the where_clause_str passed as parameter.
.TP
.B Return type
SelectWrapper
.TP
.B Raises
\fBWrongClauseOrder\fP – When the where clause is being specified before the select clause.
.UNINDENT
.UNINDENT
.UNINDENT
.SS simple_sql.wrappers.update_wrapper
.INDENT 0.0
.TP
.B class simple_sql.wrappers.update_wrapper.UpdateWrapper(metadata: MetaData, table_str: AnyStr = None, set_clause_str: Dict[AnyStr, Any] = None, where_clause_str: Dict[AnyStr, Any] = None)
This class uses the table name, the set clause and where clause
as strings with the metadata object (handled by \fBDatabase\fP) to obtain
the correct \fBTable\fP object and to create the where and set clauses.
Using the update, set and where methods, \fBUpdateWrapper\fP instances will be
created and returned to add clauses separately.
In the future all where clauses will be modeled with a class.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBmetadata\fP (\fIMetaData\fP\fI, \fP\fIoptional\fP) – The \fBMetaData\fP instance of the database.
.IP \(bu 2
\fBtable_str\fP (\fIAnyStr\fP\fI, \fP\fIoptional\fP) – The name of the table to update.
.IP \(bu 2
\fBset_clause_str\fP (\fIDict\fP\fI[\fP\fIAnyStr\fP\fI, \fP\fIStr\fP\fI]\fP\fI, \fP\fIoptional\fP) – The set clause containing which column to update
and with which value.
.IP \(bu 2
\fBwhere_clause_str\fP (\fIDict\fP\fI[\fP\fIAnyStr\fP\fI, \fP\fIStr\fP\fI]\fP\fI, \fP\fIoptional\fP) – The where clause to restrict which entries to updates.
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B __metadata
The \fBMetaData\fP instance of the database.
.INDENT 7.0
.TP
.B Type
MetaData, optional
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B __table
The \fBTable\fP object to update.
.INDENT 7.0
.TP
.B Type
Table
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B __set_clause
The set clause generated from the string set clause.
.INDENT 7.0
.TP
.B Type
Dict[AnyStr, Any]
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B __where_clause
The where clause generated from the string where clause.
.INDENT 7.0
.TP
.B Type
Dict[AnyStr, Any]
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B __table_str
The name of the table to update.
.INDENT 7.0
.TP
.B Type
AnyStr, optional
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B __set_clause_str
The set clause containing which column to update
and with which value.
.INDENT 7.0
.TP
.B Type
Dict[AnyStr, Str], optional
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B __where_clause_str
The where clause to restrict which entries to updates.
.INDENT 7.0
.TP
.B Type
Dict[AnyStr, Str], optional
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B Raises
\fBNoSuchTable\fP – If the table specified does not exists.
.UNINDENT
.INDENT 7.0
.TP
.B set(set_clause_str: Dict[AnyStr, Any]) -> simple_sql.wrappers.update_wrapper.UpdateWrapper
Used to specify the set clause.
.INDENT 7.0
.TP
.B Parameters
\fBset_clause_str\fP (\fIDict\fP\fI[\fP\fIAnyStr\fP\fI, \fP\fIAny\fP\fI]\fP) – The set clause containing which column to update
and with which value.
.TP
.B Returns
A \fBUpdateWrapper\fP instance with the same metadata, table
name and where clause and the set_clause_str passed as parameter.
.TP
.B Return type
UpdateWrapper
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B where(where_clause_str: Dict[AnyStr, Any]) -> simple_sql.wrappers.update_wrapper.UpdateWrapper
Used to specify the where clause.
.INDENT 7.0
.TP
.B Parameters
\fBwhere_clause_str\fP (\fIDict\fP\fI[\fP\fIAnyStr\fP\fI, \fP\fIAny\fP\fI]\fP) – The where clause to restrict which entries to update.
.TP
.B Returns
A \fBUpdateWrapper\fP instance with the same metadata, table
name and set clause and the where_clause_str passed as parameter.
.TP
.B Return type
UpdateWrapper
.TP
.B Raises
\fBWrongClauseOrder\fP – If the where clause is being specified before the set clause.
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 0.0
.IP \(bu 2
genindex
.IP \(bu 2
modindex
.IP \(bu 2
search
.UNINDENT
.SH AUTHOR
Riccardo Barbieri
.SH COPYRIGHT
2021, Riccardo Barbieri
.\" Generated by docutils manpage writer.
.
